@model HtmlClaimsDataImport.Models.PreviewDataModel
@using System.Text.Json

<div id="preview-container">
    @if (!Model.IsPreviewAvailable)
    {
        <div class="alert alert-warning">
            @Model.StatusMessage
        </div>
    }
    else
    {
        <div class="preview-header">
            <div class="mapping-instruction">
                <strong>
                    Which column will map to @(Model.ClaimsColumns.Count > Model.CurrentMappingStep ? Model.ClaimsColumns[Model.CurrentMappingStep] : "unknown")?
                    @if (!string.IsNullOrEmpty(Model.SelectedImportColumn))
                    {
                        <span class="selected-column">@Model.SelectedImportColumn</span>
                    }
                </strong>
            </div>
            <div class="mapping-progress">
                Step @(Model.CurrentMappingStep + 1) of @Model.ClaimsColumns.Count
            </div>
        </div>
        
        <div class="preview-table-container">
            <table class="preview-table" id="previewTable">
                <thead>
                    <tr>
                        @foreach (var column in Model.ImportColumns)
                        {
                            <th class="@(Model.SelectedImportColumn == column ? "selected-column-header" : "")" 
                                onclick="selectColumn('@column')">
                                @column
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in Model.PreviewRows)
                    {
                        <tr>
                            @foreach (var column in Model.ImportColumns)
                            {
                                <td class="@(Model.SelectedImportColumn == column ? "selected-column-cell" : "")" 
                                    onclick="selectColumn('@column')">
                                    @(row.ContainsKey(column) ? row[column] : "")
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <div class="mapping-controls">
            <button type="button" 
                    class="btn btn-secondary" 
                    id="prevBtn" 
                    onclick="previousMapping()" 
                    @(Model.CurrentMappingStep <= 0 ? "disabled" : "")>
                Previous
            </button>
            <button type="button" 
                    class="btn btn-primary" 
                    id="nextBtn" 
                    onclick="nextMapping()" 
                    @(string.IsNullOrEmpty(Model.SelectedImportColumn) ? "disabled" : "")>
                Next
            </button>
        </div>
        
        <div class="preview-info">
            <small class="text-muted">@Model.StatusMessage</small>
        </div>

        <div id="column-translation" class="column-translation">
            <button type="button"
                    id="ai-translate-btn"
                    class="ai-btn"
                    title="Generate AI mapping helper"
                    @(string.IsNullOrEmpty(Model.SelectedImportColumn) ? "disabled" : "")
                    hx-post="/ClaimsDataImporter?handler=MappingTranslation"
                    hx-target="#model-prompt"
                    hx-swap="innerHTML"
                    hx-vals='{"mappingStep": @(Model.CurrentMappingStep), "selectedColumn": "@Model.SelectedImportColumn"}'
                    hx-include="#tmpdir, input[name='__RequestVerificationToken']">
                <span class="ai-icon" aria-hidden="true">ðŸ¤–</span>
                <span>Suggest translation</span>
            </button>
            <div id="model-prompt" class="model-prompt"></div>
        </div>

        <!-- Placeholder for AI response below the column translation controls -->
        <div id="column-translation-ai-response"></div>
    }
</div>

<style>
    .preview-header {
        margin-bottom: 1.25em;
    }
    
    .mapping-instruction {
        font-size: 1em;
        margin-bottom: 0.625em;
    }
    
    .selected-column {
        color: #007bff;
        font-weight: bold;
    }
    
    .mapping-progress {
        color: #6c757d;
        font-size: 0.875em;
    }
    
    .preview-table-container {
        max-height: 25em;
        overflow: auto;
        border: 0.0625em solid #dee2e6;
        border-radius: 0.25em;
        margin-bottom: 1.25em;
    }
    
    .preview-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.75em;
    }
    
    .preview-table th,
    .preview-table td {
        border: 0.0625em solid #dee2e6;
        padding: 0.5em;
        text-align: left;
        white-space: nowrap;
        cursor: pointer;
        min-width: 6.25em;
    }
    
    .preview-table th {
        background-color: #f8f9fa;
        font-weight: bold;
        position: sticky;
        top: 0;
        z-index: 1;
    }
    
    .preview-table th:hover,
    .preview-table td:hover {
        background-color: #e9ecef;
    }
    
    .selected-column-header {
        background-color: #6495ED !important;
        color: white;
    }
    
    .selected-column-cell {
        background-color: #6495ED !important;
        color: white;
    }
    
    .mapping-controls {
        display: flex;
        gap: 0.625em;
        margin-bottom: 1.25em;
    }
    
    .preview-info {
        padding-top: 0.625em;
        border-top: 0.0625em solid #dee2e6;
    }

    .column-translation {
        margin-top: 16px;
        padding-top: 12px;
        border-top: 1px dashed #ced4da;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .ai-btn {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid #ced4da;
        background: #f1f3f5;
        color: #212529;
        cursor: pointer;
    }

    .ai-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .ai-icon {
        font-size: 16px;
    }
    
    .alert {
        padding: 0.75em;
        border-radius: 0.25em;
        margin-bottom: 1.25em;
    }
    
    .alert-warning {
        background-color: #fff3cd;
        border-color: #ffeaa7;
        color: #856404;
    }
</style>

<script>
    (function(){
        if (window.updatePreviewSidebar) {
            try {
                const claimsCols = @Html.Raw(JsonSerializer.Serialize(Model.ClaimsColumns));
                const mappings = @Html.Raw(JsonSerializer.Serialize(Model.ColumnMappings));
                const step = @Model.CurrentMappingStep;
                window.updatePreviewSidebar(claimsCols, mappings, step);
            } catch (e) {
                console.error('Failed to update preview sidebar', e);
            }
        }
    })();
    </script>
