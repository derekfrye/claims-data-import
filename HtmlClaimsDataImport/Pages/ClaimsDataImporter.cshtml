@page
@model HtmlClaimsDataImport.Pages.ClaimsDataImporter
@{
    ViewData["Title"] = "Claims Data Importer";
}

<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>

<style>
    .nav-header {
        border-bottom: 1px solid #ddd;
        padding: 10px 20px;
        background-color: #f8f9fa;
    }
    
    .nav-menu {
        display: flex;
        gap: 20px;
        margin: 0;
        padding: 0;
        list-style: none;
    }
    
    .nav-menu li {
        cursor: pointer;
        padding: 8px 16px;
        border-radius: 4px;
    }
    
    .nav-menu li.active {
        background-color: #007bff;
        color: white;
    }
    
    .nav-menu li:hover:not(.active) {
        background-color: #e9ecef;
    }
    
    .main-container {
        display: flex;
        height: calc(100vh - 60px);
    }
    
    .sidebar {
        width: 200px;
        border-right: 1px solid #ddd;
        background-color: #f8f9fa;
        padding: 20px;
    }
    
    .sidebar ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .sidebar li {
        padding: 8px 12px;
        cursor: pointer;
        border-radius: 4px;
        margin-bottom: 5px;
    }
    
    .sidebar li.active {
        background-color: #007bff;
        color: white;
    }
    
    .sidebar li:hover:not(.active) {
        background-color: #e9ecef;
    }
    
    .content-area {
        flex: 1;
        padding: 20px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: inline-block;
        width: 80px;
        font-weight: bold;
    }
    
    .form-group input {
        width: 300px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 0.7em;
    }
    
    .mode-selector {
        width: 150px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 0.8em;
        margin-bottom: 10px;
    }
    
    .default-preview {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        padding: 10px;
        margin-top: 5px;
        margin-bottom: 10px;
    }
    
    .default-text {
        color: #6c757d;
        font-style: italic;
        font-size: 0.9em;
    }
    
    .upload-section {
        margin-top: 5px;
    }
    
    .file-path-input {
        width: 300px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 0.7em;
    }
    
    .browse-btn {
        margin-left: 10px;
        padding: 8px 16px;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .browse-btn:hover {
        background-color: #5a6268;
    }
    
    .file-input {
        display: none;
    }
    
    .file-status {
        margin-left: 10px;
        color: #6c757d;
        font-style: italic;
    }
    
    .hidden {
        display: none;
    }
    
    .load-btn {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1em;
        margin-right: 10px;
    }
    
    .load-btn:hover:not(.disabled) {
        background-color: #0056b3;
    }
    
    .load-btn.disabled {
        background-color: #6c757d;
        cursor: not-allowed;
        opacity: 0.6;
    }
</style>

<div class="nav-header">
    <ul class="nav-menu">
        <li class="active" onclick="showHome()">Home</li>
        <li onclick="showPreview()">Preview</li>
        <li onclick="showDeveloper()">Developer</li>
    </ul>
</div>

<div class="main-container">
    <div class="sidebar" id="home-sidebar">
        <ul>
            <li class="active" onclick="showConfig()">Config</li>
        </ul>
    </div>
    
    <div class="sidebar hidden" id="preview-sidebar">
        <!-- Preview sidebar content would go here -->
    </div>
    
    <div class="sidebar hidden" id="developer-sidebar">
        <ul>
            <li class="active" onclick="showDeveloperInfo()">Info</li>
        </ul>
    </div>
    
    <div class="content-area">
        <div id="config-content">
            <form method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="fileName">filename:</label>
                    <input type="text" id="fileName" name="FileName" value="@Model.FileName" readonly />
                    <input type="file" id="fileNameInput" class="file-input" accept=".csv,.txt" onchange="uploadFile('filename', this)" />
                    <button type="button" class="browse-btn" onclick="document.getElementById('fileNameInput').click()">Browse</button>
                    <span id="filename-status" class="file-status">@Model.FileNameStatus</span>
                </div>
                
                <div class="form-group">
                    <label for="jsonMode">json:</label>
                    <select id="jsonMode" name="JsonMode" onchange="toggleJsonMode()" class="mode-selector">
                        @if (Model.JsonMode == "default")
                        {
                            <option value="default" selected="selected">Use Default</option>
                            <option value="upload">Upload File</option>
                        }
                        else
                        {
                            <option value="default">Use Default</option>
                            <option value="upload" selected="selected">Upload File</option>
                        }
                    </select>
                    
                    <div id="json-default-preview" class="default-preview @(Model.JsonMode == "upload" ? "hidden" : "")">
                        <span class="default-text">Default: @Model.DefaultJsonFile</span>
                    </div>
                    
                    <div id="json-upload-section" class="upload-section @(Model.JsonMode == "default" ? "hidden" : "")">
                        <input type="text" id="jsonFile" name="JsonFile" value="@Model.JsonFile" readonly class="file-path-input" />
                        <input type="file" id="jsonFileInput" class="file-input" accept=".json" onchange="uploadFile('json', this)" />
                        <button type="button" class="browse-btn" onclick="document.getElementById('jsonFileInput').click()">Browse</button>
                    </div>
                    
                    <span id="json-status" class="file-status">@Model.JsonFileStatus</span>
                </div>
                
                <div class="form-group">
                    <label for="databaseMode">database:</label>
                    <select id="databaseMode" name="DatabaseMode" onchange="toggleDatabaseMode()" class="mode-selector">
                        @if (Model.DatabaseMode == "default")
                        {
                            <option value="default" selected="selected">Use Default</option>
                            <option value="upload">Upload File</option>
                        }
                        else
                        {
                            <option value="default">Use Default</option>
                            <option value="upload" selected="selected">Upload File</option>
                        }
                    </select>
                    
                    <div id="database-default-preview" class="default-preview @(Model.DatabaseMode == "upload" ? "hidden" : "")">
                        <span class="default-text">Default: @Model.DefaultDatabase</span>
                    </div>
                    
                    <div id="database-upload-section" class="upload-section @(Model.DatabaseMode == "default" ? "hidden" : "")">
                        <input type="text" id="database" name="Database" value="@Model.Database" readonly class="file-path-input" />
                        <input type="file" id="databaseInput" class="file-input" accept=".db,.sqlite,.sqlite3" onchange="uploadFile('database', this)" />
                        <button type="button" class="browse-btn" onclick="document.getElementById('databaseInput').click()">Browse</button>
                    </div>
                    
                    <span id="database-status" class="file-status">@Model.DatabaseStatus</span>
                </div>
                
                <div class="form-group">
                    <button type="button" id="loadBtn" class="load-btn disabled" onclick="loadData()">Load</button>
                    <span id="load-warning" class="file-status"></span>
                </div>
                
                <!-- Hidden field to maintain temp directory across requests -->
                <input type="hidden" id="tmpdir" name="tmpdir" value="@Model.TempDirectory" />
            </form>
        </div>
        
        <div id="preview-content" class="hidden">
            <h3>Preview Content</h3>
            <div id="preview-container">
                <div class="alert alert-info">
                    <p>Click the Preview tab and this content will be loaded automatically.</p>
                </div>
            </div>
        </div>
        
        <div id="developer-content" class="hidden">
            <h3>Developer Information</h3>
            <div>
                <strong>Temp Directory:</strong> <span id="temp-directory">@Model.TempDirectory</span>
            </div>
            <br />
            <div>
                <strong>File Upload Log:</strong>
                <div id="upload-log" style="font-family: monospace; background-color: #f8f9fa; padding: 10px; border: 1px solid #ddd; margin-top: 10px; max-height: 300px; overflow-y: auto;">
                    <!-- Upload log entries will appear here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function showHome() {
        document.querySelector('.nav-menu li.active').classList.remove('active');
        event.target.classList.add('active');
        
        document.getElementById('home-sidebar').classList.remove('hidden');
        document.getElementById('preview-sidebar').classList.add('hidden');
        document.getElementById('developer-sidebar').classList.add('hidden');
        
        document.getElementById('config-content').classList.remove('hidden');
        document.getElementById('preview-content').classList.add('hidden');
        document.getElementById('developer-content').classList.add('hidden');
    }
    
    function showPreview() {
        document.querySelector('.nav-menu li.active').classList.remove('active');
        event.target.classList.add('active');
        
        document.getElementById('home-sidebar').classList.add('hidden');
        document.getElementById('preview-sidebar').classList.remove('hidden');
        document.getElementById('developer-sidebar').classList.add('hidden');
        
        document.getElementById('config-content').classList.add('hidden');
        document.getElementById('preview-content').classList.remove('hidden');
        document.getElementById('developer-content').classList.add('hidden');
        
        // Load preview data automatically when preview tab is shown
        loadPreviewData();
    }
    
    function loadPreviewData() {
        const tmpdir = document.getElementById('tmpdir').value;
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
        fetch('/ClaimsDataImporter?handler=Preview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `tmpdir=${encodeURIComponent(tmpdir)}&mappingStep=0&selectedColumn=&__RequestVerificationToken=${encodeURIComponent(token)}`
        })
        .then(response => response.text())
        .then(html => {
            document.getElementById('preview-container').innerHTML = html;
        })
        .catch(error => {
            console.error('Error loading preview:', error);
            document.getElementById('preview-container').innerHTML = '<div class="alert alert-danger">Error loading preview data</div>';
        });
    }
    
    function showDeveloper() {
        document.querySelector('.nav-menu li.active').classList.remove('active');
        event.target.classList.add('active');
        
        document.getElementById('home-sidebar').classList.add('hidden');
        document.getElementById('preview-sidebar').classList.add('hidden');
        document.getElementById('developer-sidebar').classList.remove('hidden');
        
        document.getElementById('config-content').classList.add('hidden');
        document.getElementById('preview-content').classList.add('hidden');
        document.getElementById('developer-content').classList.remove('hidden');
    }
    
    function showConfig() {
        // Config is the only option in Home sidebar for now
        document.querySelector('#home-sidebar li.active').classList.remove('active');
        event.target.classList.add('active');
    }
    
    function showDeveloperInfo() {
        // Info is the only option in Developer sidebar for now
        document.querySelector('#developer-sidebar li.active').classList.remove('active');
        event.target.classList.add('active');
    }
    
    function toggleJsonMode() {
        const mode = document.getElementById('jsonMode').value;
        const defaultPreview = document.getElementById('json-default-preview');
        const uploadSection = document.getElementById('json-upload-section');
        const statusElement = document.getElementById('json-status');
        
        if (mode === 'default') {
            defaultPreview.classList.remove('hidden');
            uploadSection.classList.add('hidden');
            // Clear upload field and show default status
            document.getElementById('jsonFile').value = '';
            statusElement.textContent = 'Using default configuration';
        } else {
            defaultPreview.classList.add('hidden');
            uploadSection.classList.remove('hidden');
            statusElement.textContent = 'Please select a file';
        }
        validateLoadButton();
    }
    
    function toggleDatabaseMode() {
        const mode = document.getElementById('databaseMode').value;
        const defaultPreview = document.getElementById('database-default-preview');
        const uploadSection = document.getElementById('database-upload-section');
        const statusElement = document.getElementById('database-status');
        
        if (mode === 'default') {
            defaultPreview.classList.remove('hidden');
            uploadSection.classList.add('hidden');
            // Clear upload field and show default status
            document.getElementById('database').value = '';
            statusElement.textContent = 'Using default database';
        } else {
            defaultPreview.classList.add('hidden');
            uploadSection.classList.remove('hidden');
            statusElement.textContent = 'Please select a file';
        }
        validateLoadButton();
    }
    
    function validateLoadButton() {
        const loadBtn = document.getElementById('loadBtn');
        const loadWarning = document.getElementById('load-warning');
        
        // Check JSON condition
        const jsonMode = document.getElementById('jsonMode').value;
        const jsonFile = document.getElementById('jsonFile').value;
        const jsonValid = jsonMode === 'default' || (jsonMode === 'upload' && jsonFile.trim() !== '');
        
        if (!jsonValid) {
            loadBtn.classList.add('disabled');
            loadWarning.textContent = '';
            return;
        }
        
        // Check filename condition
        const fileName = document.getElementById('fileName').value;
        const fileValid = fileName.trim() !== '';
        
        if (!fileValid) {
            loadBtn.classList.add('disabled');
            loadWarning.textContent = '';
            return;
        }
        
        // Check database condition
        const databaseMode = document.getElementById('databaseMode').value;
        const database = document.getElementById('database').value;
        const databaseValid = databaseMode === 'default' || (databaseMode === 'upload' && database.trim() !== '');
        
        if (!databaseValid) {
            loadBtn.classList.add('disabled');
            loadWarning.textContent = '';
            return;
        }
        
        // All conditions met - enable button
        loadBtn.classList.remove('disabled');
        loadWarning.textContent = '';
    }
    
    function loadData() {
        const loadBtn = document.getElementById('loadBtn');
        const loadWarning = document.getElementById('load-warning');
        
        if (loadBtn.classList.contains('disabled')) {
            // Check conditions and show appropriate warning
            const jsonMode = document.getElementById('jsonMode').value;
            const jsonFile = document.getElementById('jsonFile').value;
            const jsonValid = jsonMode === 'default' || (jsonMode === 'upload' && jsonFile.trim() !== '');
            
            if (!jsonValid) {
                loadWarning.textContent = 'no json supplied';
                return;
            }
            
            const fileName = document.getElementById('fileName').value;
            const fileValid = fileName.trim() !== '';
            
            if (!fileValid) {
                loadWarning.textContent = 'no file supplied';
                return;
            }
            
            const databaseMode = document.getElementById('databaseMode').value;
            const database = document.getElementById('database').value;
            const databaseValid = databaseMode === 'default' || (databaseMode === 'upload' && database.trim() !== '');
            
            if (!databaseValid) {
                loadWarning.textContent = 'no database supplied';
                return;
            }
        }
        
        // All conditions met - proceed with load
        loadWarning.textContent = 'Loading...';
        
        // Prepare data for server
        const formData = new FormData();
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        formData.append('__RequestVerificationToken', token);
        formData.append('tmpdir', document.getElementById('tmpdir').value);
        formData.append('fileName', document.getElementById('fileName').value);
        
        // Add JSON path
        const jsonMode = document.getElementById('jsonMode').value;
        if (jsonMode === 'default') {
            formData.append('jsonPath', 'default');
        } else {
            formData.append('jsonPath', document.getElementById('jsonFile').value);
        }
        
        // Add database path
        const databaseMode = document.getElementById('databaseMode').value;
        if (databaseMode === 'default') {
            formData.append('databasePath', 'default');
        } else {
            formData.append('databasePath', document.getElementById('database').value);
        }
        
        // Use fetch to call the load handler
        fetch('/ClaimsDataImporter?handler=LoadData', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(result => {
            loadWarning.textContent = result;
        })
        .catch(error => {
            console.error('Load error:', error);
            loadWarning.textContent = 'Load failed';
        });
    }
    
    function selectColumn(columnName) {
        // Update selected column via AJAX
        const tmpdir = document.getElementById('tmpdir').value;
        
        // Get current mapping step from the UI
        const mappingProgressElement = document.querySelector('.mapping-progress');
        let currentStep = 0;
        if (mappingProgressElement) {
            const stepText = mappingProgressElement.textContent;
            const stepMatch = stepText.match(/Step (\d+)/);
            if (stepMatch) {
                currentStep = parseInt(stepMatch[1]) - 1; // Convert to 0-based
            }
        }
        
        fetch('/ClaimsDataImporter?handler=Preview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: `tmpdir=${encodeURIComponent(tmpdir)}&mappingStep=${currentStep}&selectedColumn=${encodeURIComponent(columnName)}&__RequestVerificationToken=${encodeURIComponent(document.querySelector('input[name="__RequestVerificationToken"]').value)}`
        })
        .then(response => response.text())
        .then(html => {
            document.getElementById('preview-container').innerHTML = html;
        })
        .catch(error => {
            console.error('Error selecting column:', error);
        });
    }
    
    function nextMapping() {
        const tmpdir = document.getElementById('tmpdir').value;
        
        // Get current mapping step and selected column from the UI
        const mappingProgressElement = document.querySelector('.mapping-progress');
        let currentStep = 0;
        if (mappingProgressElement) {
            const stepText = mappingProgressElement.textContent;
            const stepMatch = stepText.match(/Step (\d+)/);
            if (stepMatch) {
                currentStep = parseInt(stepMatch[1]) - 1; // Convert to 0-based
            }
        }
        
        const selectedColumnElement = document.querySelector('.selected-column');
        const selectedColumn = selectedColumnElement ? selectedColumnElement.textContent.trim() : '';
        
        if (!selectedColumn) {
            alert('Please select a column first.');
            return;
        }
        
        // Move to next mapping step
        fetch('/ClaimsDataImporter?handler=Preview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: `tmpdir=${encodeURIComponent(tmpdir)}&mappingStep=${currentStep + 1}&selectedColumn=&__RequestVerificationToken=${encodeURIComponent(document.querySelector('input[name="__RequestVerificationToken"]').value)}`
        })
        .then(response => response.text())
        .then(html => {
            document.getElementById('preview-container').innerHTML = html;
        })
        .catch(error => {
            console.error('Error moving to next mapping:', error);
        });
    }
    
    function previousMapping() {
        const tmpdir = document.getElementById('tmpdir').value;
        
        // Get current mapping step from the UI
        const mappingProgressElement = document.querySelector('.mapping-progress');
        let currentStep = 0;
        if (mappingProgressElement) {
            const stepText = mappingProgressElement.textContent;
            const stepMatch = stepText.match(/Step (\d+)/);
            if (stepMatch) {
                currentStep = parseInt(stepMatch[1]) - 1; // Convert to 0-based
            }
        }
        
        if (currentStep <= 0) {
            return;
        }
        
        // Move to previous mapping step
        fetch('/ClaimsDataImporter?handler=Preview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: `tmpdir=${encodeURIComponent(tmpdir)}&mappingStep=${currentStep - 1}&selectedColumn=&__RequestVerificationToken=${encodeURIComponent(document.querySelector('input[name="__RequestVerificationToken"]').value)}`
        })
        .then(response => response.text())
        .then(html => {
            document.getElementById('preview-container').innerHTML = html;
        })
        .catch(error => {
            console.error('Error moving to previous mapping:', error);
        });
    }

    function uploadFile(fileType, inputElement) {
        let textElement, statusTarget;
        
        switch(fileType) {
            case 'json':
                textElement = document.getElementById('jsonFile');
                statusTarget = '#json-status';
                break;
            case 'filename':
                textElement = document.getElementById('fileName');
                statusTarget = '#filename-status';
                break;
            case 'database':
                textElement = document.getElementById('database');
                statusTarget = '#database-status';
                break;
        }
        
        if (inputElement.files.length > 0) {
            const selectedFile = inputElement.files[0];
            textElement.value = selectedFile.name;
            
            // Create FormData to upload the file
            const formData = new FormData();
            formData.append('fileType', fileType);
            formData.append('uploadedFile', selectedFile);
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            formData.append('__RequestVerificationToken', token);
            
            // Include temp directory to maintain session consistency
            const tmpdir = document.querySelector('input[name="tmpdir"]').value;
            if (tmpdir) {
                formData.append('tmpdir', tmpdir);
            }
            
            // Use fetch to upload file (HTMX doesn't handle FormData well in htmx.ajax)
            fetch('/ClaimsDataImporter?handler=FileUpload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(html => {
                // Parse the response which contains multiple HTML fragments
                console.log('Response HTML:', html);
                
                // Create a temporary container to parse the response
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                
                // Update status span using data attributes
                const statusSpan = tempDiv.querySelector('span[data-status]');
                if (statusSpan) {
                    const targetId = statusSpan.id;
                    const statusText = statusSpan.dataset.status;
                    const statusElement = document.getElementById(targetId);
                    if (statusElement) {
                        statusElement.textContent = statusText;
                    }
                }
                
                // Update input field using data attributes
                const inputElement = tempDiv.querySelector('input[data-file-path]');
                if (inputElement) {
                    const targetId = inputElement.id;
                    const filePath = inputElement.dataset.filePath;
                    const targetInput = document.getElementById(targetId);
                    if (targetInput) {
                        targetInput.value = filePath;
                    }
                }
                
                // Update upload log using data attributes
                const logDiv = tempDiv.querySelector('div[data-log-entry]');
                if (logDiv) {
                    const logEntry = logDiv.dataset.logEntry;
                    const uploadLog = document.getElementById('upload-log');
                    uploadLog.innerHTML = logEntry + '<br/>' + uploadLog.innerHTML;
                }
                
                // Validate load button after upload
                validateLoadButton();
            })
            .catch(error => {
                console.error('Upload error:', error);
                document.querySelector(statusTarget).textContent = 'Upload failed';
            });
        } else {
            // User cancelled - clear the field and update status
            textElement.value = '';
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            htmx.ajax('POST', '/ClaimsDataImporter?handler=FileSelected', {
                target: statusTarget,
                values: {
                    fileType: fileType,
                    fileName: '',
                    action: 'cancel',
                    __RequestVerificationToken: token
                }
            });
        }
    }
</script>